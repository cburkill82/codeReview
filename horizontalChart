//Draw the graph bars
func createHorizontalChart(percent: Int, background: Bool, layoutMargins: UIEdgeInsets) -> UIView {
    print("DRAW CHART START")

    //Draw rect from top left and specify the height
    let xPos = 0
    let yPos = 0
    let rectHeight = 8
    //Calcultate the width of the bar
    let screenWidth = UIScreen.main.bounds.size.width
    let widthMinusMargins = screenWidth - layoutMargins.left - layoutMargins.right
    let barWidth = widthMinusMargins / CGFloat(100) * CGFloat(percent)
    // Create a CGRect (CG=CoreGraphics) object which is used to render a rectangle.
    let rectFrame: CGRect = CGRect(x:CGFloat(xPos), y:CGFloat(yPos), width:barWidth, height:CGFloat(rectHeight))
    // Create a UIView object which use above CGRect object.
    let barView = UIView(frame: rectFrame)
    // Set UIView background color.
    if background == true {
        barView.backgroundColor = UIColor(named: "gGreenDark")
    } else {
        barView.backgroundColor = UIColor(named: "gBlack")
    }

    // Set the corner radius
    barView.layer.cornerRadius = 5 // Adjust the value as needed
    // Enable masksToBounds to ensure corners are rounded
    barView.layer.masksToBounds = true
    
    return barView
}

func createPieChart(xCenter: CGFloat, yCenter: CGFloat) -> CAShapeLayer {
    // Create a UIBezierPath for the arc
    let arcPath = UIBezierPath()

    // Define the center point of the arc
    let center = CGPoint(x: xCenter, y: yCenter)

    // Define the radius of the arc
    let radius: CGFloat = 30

    // Define the starting angle (in radians)
    let startAngle: CGFloat = CGFloat(-Double.pi / 4) // -45 degrees

    // Define the ending angle (in radians)
    let endAngle: CGFloat = CGFloat(Double.pi / 4) // 45 degrees

    // Create the arc path
    arcPath.addArc(withCenter: center, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)

    // Create a CAShapeLayer to display the path
    let shapeLayer = CAShapeLayer()
    shapeLayer.path = arcPath.cgPath

    if let gBlackColor = UIColor(named: "gBlack") {
    shapeLayer.strokeColor = gBlackColor.cgColor
    }
    
    shapeLayer.fillColor = UIColor.clear.cgColor
    shapeLayer.lineWidth = 2.0
            
    return shapeLayer
}
